name: Docker tagged image on tag

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
      - "[0-9]+.[0-9]+.[0-9]+*"

jobs:
  test:
    uses: ./.github/workflows/run-all-tests.yml
    secrets: inherit

  amd64:
    runs-on: buildjet-4vcpu-ubuntu-2204
    name: Push AMD64 Docker image to Docker Hub
    needs: test
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: lncapital/torq
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},prefix=amd64-

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  arm:
    runs-on: buildjet-4vcpu-ubuntu-2204-arm
    name: Push ARM Docker image to Docker Hub
    needs: test
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: lncapital/torq
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},prefix=arm-

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  combine-manifests:
    runs-on: buildjet-4vcpu-ubuntu-2204
    name: Combine architectures into one manifest
    needs:
      - amd64
      - arm
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: olegtarasov/get-tag@v2.1
        name: Get tag
        id: tagName
        with:
          tagRegex: "v?(.+)" # Optional. Returns specified group text as tag name. Full tag string is returned if regex is not defined.
          tagRegexGroup: 1 # Optional. Default is 1.
      - name: Docker create manifest
        run: >
          docker manifest create
          lncapital/torq:${{ steps.tagName.outputs.tag }}
          --amend lncapital/torq:amd64-${{ steps.tagName.outputs.tag }}
          --amend lncapital/torq:arm-${{ steps.tagName.outputs.tag }}
      - name: Docker push manifest
        run: docker manifest push lncapital/torq:${{ steps.tagName.outputs.tag }}

  releases-matrix:
    name: Release Go Binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # build and publish in parallel: linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm64]
        node-version: [16.x]
        exclude:
          - goarch: "386"
            goos: darwin
          - goarch: arm64
            goos: windows
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: NPM Install
        working-directory: ./web
        run: npm install
      - name: NPM Build
        working-directory: ./web
        run: TSX_COMPILE_ON_ERROR=true ESLINT_NO_DEV_ERRORS=true npm run build
      - uses: actions/setup-go@v4
        with:
          go-version: '1.19'
      - name: generate
        run: go generate build/version.go
      - uses: wangyoucao577/go-release-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          pre_command: export CGO_ENABLED=0
          build_command: go build cmd/torq/torq.go
          extra_files: LICENSE.md README.md SECURITY.md CONTRIBUTING.md
